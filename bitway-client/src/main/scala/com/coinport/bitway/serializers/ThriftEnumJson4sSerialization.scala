
/**
 * Copyright (C) 2014 Coinport Inc. <http://www.coinport.com>
 *
 * This file was auto generated by auto_gen_serializer.sh
 */

package com.coinport.bitway.serializers

import org.json4s.CustomSerializer
import org.json4s._
import org.json4s.ext._
import com.coinport.bitway.data._
import org.json4s.native.Serialization

object MapSerializer extends Serializer[Map[Any, Any]] {
  def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
    case m: Map[_, _] => JObject(m.map({
      case (k, v) => JField(
        k match {
          case ks: String => ks
          case ks: AssetStatus => ks.name.toUpperCase
          case ks: BillType => ks.name.toUpperCase
          case ks: BitwayRequestType => ks.name.toUpperCase
          case ks: BitwayResponseType => ks.name.toUpperCase
          case ks: Country => ks.name.toUpperCase
          case ks: CryptoCurrencyAddressType => ks.name.toUpperCase
          case ks: Currency => ks.name.toUpperCase
          case ks: EmailType => ks.name.toUpperCase
          case ks: ErrorCode => ks.name.toUpperCase
          case ks: Exchange => ks.name.toUpperCase
          case ks: InvoiceStatus => ks.name.toUpperCase
          case ks: MerchantStatus => ks.name.toUpperCase
          case ks: OrderStatus => ks.name.toUpperCase
          case ks: OrderType => ks.name.toUpperCase
          case ks: StrategyDriveType => ks.name.toUpperCase
          case ks: StrategyStatus => ks.name.toUpperCase
          case ks: TradeActionStatus => ks.name.toUpperCase
          case ks: TransactionSpeed => ks.name.toUpperCase
          case ks: TransferStatus => ks.name.toUpperCase
          case ks: TransferType => ks.name.toUpperCase
          case ks: Any => ks.toString
        },
        Extraction.decompose(v))
    }).toList)
  }

  // TODO(d): https://github.com/json4s/json4s/blob/master/tests/src/test/scala/org/json4s/native/SerializationExamples.scala
  def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), Map[Any, Any]] = {
    sys.error("Not interested.")
  }
}

object ThriftEnumJson4sSerialization {

  class AssetStatusSerializer extends CustomSerializer[AssetStatus](format => (
    { case JString(s) => AssetStatus.valueOf(s).get }, {
      case x: AssetStatus => JString(x.name)
    }))

  class BillTypeSerializer extends CustomSerializer[BillType](format => (
    { case JString(s) => BillType.valueOf(s).get }, {
      case x: BillType => JString(x.name)
    }))

  class BitwayRequestTypeSerializer extends CustomSerializer[BitwayRequestType](format => (
    { case JString(s) => BitwayRequestType.valueOf(s).get }, {
      case x: BitwayRequestType => JString(x.name)
    }))

  class BitwayResponseTypeSerializer extends CustomSerializer[BitwayResponseType](format => (
    { case JString(s) => BitwayResponseType.valueOf(s).get }, {
      case x: BitwayResponseType => JString(x.name)
    }))

  class CountrySerializer extends CustomSerializer[Country](format => (
    { case JString(s) => Country.valueOf(s).get }, {
      case x: Country => JString(x.name)
    }))

  class CryptoCurrencyAddressTypeSerializer extends CustomSerializer[CryptoCurrencyAddressType](format => (
    { case JString(s) => CryptoCurrencyAddressType.valueOf(s).get }, {
      case x: CryptoCurrencyAddressType => JString(x.name)
    }))

  class CurrencySerializer extends CustomSerializer[Currency](format => (
    { case JString(s) => Currency.valueOf(s).get }, {
      case x: Currency => JString(x.name)
    }))

  class EmailTypeSerializer extends CustomSerializer[EmailType](format => (
    { case JString(s) => EmailType.valueOf(s).get }, {
      case x: EmailType => JString(x.name)
    }))

  class ErrorCodeSerializer extends CustomSerializer[ErrorCode](format => (
    { case JString(s) => ErrorCode.valueOf(s).get }, {
      case x: ErrorCode => JString(x.name)
    }))

  class ExchangeSerializer extends CustomSerializer[Exchange](format => (
    { case JString(s) => Exchange.valueOf(s).get }, {
      case x: Exchange => JString(x.name)
    }))

  class InvoiceStatusSerializer extends CustomSerializer[InvoiceStatus](format => (
    { case JString(s) => InvoiceStatus.valueOf(s).get }, {
      case x: InvoiceStatus => JString(x.name)
    }))

  class MerchantStatusSerializer extends CustomSerializer[MerchantStatus](format => (
    { case JString(s) => MerchantStatus.valueOf(s).get }, {
      case x: MerchantStatus => JString(x.name)
    }))

  class OrderStatusSerializer extends CustomSerializer[OrderStatus](format => (
    { case JString(s) => OrderStatus.valueOf(s).get }, {
      case x: OrderStatus => JString(x.name)
    }))

  class OrderTypeSerializer extends CustomSerializer[OrderType](format => (
    { case JString(s) => OrderType.valueOf(s).get }, {
      case x: OrderType => JString(x.name)
    }))

  class StrategyDriveTypeSerializer extends CustomSerializer[StrategyDriveType](format => (
    { case JString(s) => StrategyDriveType.valueOf(s).get }, {
      case x: StrategyDriveType => JString(x.name)
    }))

  class StrategyStatusSerializer extends CustomSerializer[StrategyStatus](format => (
    { case JString(s) => StrategyStatus.valueOf(s).get }, {
      case x: StrategyStatus => JString(x.name)
    }))

  class TradeActionStatusSerializer extends CustomSerializer[TradeActionStatus](format => (
    { case JString(s) => TradeActionStatus.valueOf(s).get }, {
      case x: TradeActionStatus => JString(x.name)
    }))

  class TransactionSpeedSerializer extends CustomSerializer[TransactionSpeed](format => (
    { case JString(s) => TransactionSpeed.valueOf(s).get }, {
      case x: TransactionSpeed => JString(x.name)
    }))

  class TransferStatusSerializer extends CustomSerializer[TransferStatus](format => (
    { case JString(s) => TransferStatus.valueOf(s).get }, {
      case x: TransferStatus => JString(x.name)
    }))

  class TransferTypeSerializer extends CustomSerializer[TransferType](format => (
    { case JString(s) => TransferType.valueOf(s).get }, {
      case x: TransferType => JString(x.name)
    }))

  implicit val formats = Serialization.formats(NoTypeHints) +
    new AssetStatusSerializer +
    new BillTypeSerializer +
    new BitwayRequestTypeSerializer +
    new BitwayResponseTypeSerializer +
    new CountrySerializer +
    new CryptoCurrencyAddressTypeSerializer +
    new CurrencySerializer +
    new EmailTypeSerializer +
    new ErrorCodeSerializer +
    new ExchangeSerializer +
    new InvoiceStatusSerializer +
    new MerchantStatusSerializer +
    new OrderStatusSerializer +
    new OrderTypeSerializer +
    new StrategyDriveTypeSerializer +
    new StrategyStatusSerializer +
    new TradeActionStatusSerializer +
    new TransactionSpeedSerializer +
    new TransferStatusSerializer +
    new TransferTypeSerializer
}
