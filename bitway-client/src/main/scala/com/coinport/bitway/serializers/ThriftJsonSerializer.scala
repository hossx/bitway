
/**
 * Copyright (C) 2014 Coinport Inc. <http://www.coinport.com>
 *
 * This file was auto generated by auto_gen_serializer.sh
 */

package com.coinport.bitway.serializers

import akka.serialization.Serializer
import com.twitter.bijection.scrooge.BinaryScalaCodec
import com.coinport.bitway.data._

class ThriftJsonSerializer extends Serializer {
  val includeManifest: Boolean = true
  val identifier = 607100416
  lazy val _cAccountExchange = JsonScalaCodec(AccountExchange)
  lazy val _cAccountTransfer = JsonScalaCodec(AccountTransfer)
  lazy val _cAccountTransfersWithMinerFee = JsonScalaCodec(AccountTransfersWithMinerFee)
  lazy val _cAddressStatusResult = JsonScalaCodec(AddressStatusResult)
  lazy val _cBankAccount = JsonScalaCodec(BankAccount)
  lazy val _cBillItem = JsonScalaCodec(BillItem)
  lazy val _cBitcoinBlock = JsonScalaCodec(BitcoinBlock)
  lazy val _cBitcoinTx = JsonScalaCodec(BitcoinTx)
  lazy val _cBitcoinTxPort = JsonScalaCodec(BitcoinTxPort)
  lazy val _cBlockIndex = JsonScalaCodec(BlockIndex)
  lazy val _cCashAccount = JsonScalaCodec(CashAccount)
  lazy val _cContact = JsonScalaCodec(Contact)
  lazy val _cCryptoAddress = JsonScalaCodec(CryptoAddress)
  lazy val _cCryptoCurrencyBlock = JsonScalaCodec(CryptoCurrencyBlock)
  lazy val _cCryptoCurrencyNetworkStatus = JsonScalaCodec(CryptoCurrencyNetworkStatus)
  lazy val _cCryptoCurrencyTransaction = JsonScalaCodec(CryptoCurrencyTransaction)
  lazy val _cCryptoCurrencyTransactionPort = JsonScalaCodec(CryptoCurrencyTransactionPort)
  lazy val _cCryptoCurrencyTransferInfo = JsonScalaCodec(CryptoCurrencyTransferInfo)
  lazy val _cCryptoCurrencyTransferItem = JsonScalaCodec(CryptoCurrencyTransferItem)
  lazy val _cCursor = JsonScalaCodec(Cursor)
  lazy val _cDelayedPost = JsonScalaCodec(DelayedPost)
  lazy val _cDepth = JsonScalaCodec(Depth)
  lazy val _cDepthItem = JsonScalaCodec(DepthItem)
  lazy val _cExchangeAccountInfo = JsonScalaCodec(ExchangeAccountInfo)
  lazy val _cExchangeOrder = JsonScalaCodec(ExchangeOrder)
  lazy val _cExchangeParam = JsonScalaCodec(ExchangeParam)
  lazy val _cExchangeRate = JsonScalaCodec(ExchangeRate)
  lazy val _cFee = JsonScalaCodec(Fee)
  lazy val _cGetAccountResult = JsonScalaCodec(GetAccountResult)
  lazy val _cInvoice = JsonScalaCodec(Invoice)
  lazy val _cInvoiceData = JsonScalaCodec(InvoiceData)
  lazy val _cInvoiceNotification = JsonScalaCodec(InvoiceNotification)
  lazy val _cInvoiceNotificationInfo = JsonScalaCodec(InvoiceNotificationInfo)
  lazy val _cInvoiceSummary = JsonScalaCodec(InvoiceSummary)
  lazy val _cInvoiceUpdate = JsonScalaCodec(InvoiceUpdate)
  lazy val _cL2MarketExchangeOrder = JsonScalaCodec(L2MarketExchangeOrder)
  lazy val _cMerchant = JsonScalaCodec(Merchant)
  lazy val _cNotificationData = JsonScalaCodec(NotificationData)
  lazy val _cOrder = JsonScalaCodec(Order)
  lazy val _cOrderUpdate = JsonScalaCodec(OrderUpdate)
  lazy val _cPaymentData = JsonScalaCodec(PaymentData)
  lazy val _cPaymentNotification = JsonScalaCodec(PaymentNotification)
  lazy val _cQuantAccount = JsonScalaCodec(QuantAccount)
  lazy val _cQueryOrderResult = JsonScalaCodec(QueryOrderResult)
  lazy val _cRedeliverFilterData = JsonScalaCodec(RedeliverFilterData)
  lazy val _cRedeliverFilters = JsonScalaCodec(RedeliverFilters)
  lazy val _cSellParam = JsonScalaCodec(SellParam)
  lazy val _cSpanCursor = JsonScalaCodec(SpanCursor)
  lazy val _cSubmitOrderResult = JsonScalaCodec(SubmitOrderResult)
  lazy val _cTAddressStatus = JsonScalaCodec(TAddressStatus)
  lazy val _cTradeAction = JsonScalaCodec(TradeAction)
  lazy val _cTradePair = JsonScalaCodec(TradePair)
  lazy val _cTradeStrategy = JsonScalaCodec(TradeStrategy)
  lazy val _cTransferConfig = JsonScalaCodec(TransferConfig)
  lazy val _cAccessDenied = JsonScalaCodec(AccessDenied)
  lazy val _cAccessGranted = JsonScalaCodec(AccessGranted)
  lazy val _cAccountDisabled = JsonScalaCodec(AccountDisabled)
  lazy val _cAdjustAddressAmount = JsonScalaCodec(AdjustAddressAmount)
  lazy val _cAdjustAddressAmountResult = JsonScalaCodec(AdjustAddressAmountResult)
  lazy val _cAdjustAggregationAccount = JsonScalaCodec(AdjustAggregationAccount)
  lazy val _cAdjustAggregationAccountResult = JsonScalaCodec(AdjustAggregationAccountResult)
  lazy val _cAdjustMerchantAccount = JsonScalaCodec(AdjustMerchantAccount)
  lazy val _cAdjustMerchantAccountResult = JsonScalaCodec(AdjustMerchantAccountResult)
  lazy val _cAdminCommandResult = JsonScalaCodec(AdminCommandResult)
  lazy val _cAdminConfirmTransferFailure = JsonScalaCodec(AdminConfirmTransferFailure)
  lazy val _cAdminConfirmTransferSuccess = JsonScalaCodec(AdminConfirmTransferSuccess)
  lazy val _cAdminSetTransferStatus = JsonScalaCodec(AdminSetTransferStatus)
  lazy val _cAllApiTokensDestroied = JsonScalaCodec(AllApiTokensDestroied)
  lazy val _cAllocateNewAddress = JsonScalaCodec(AllocateNewAddress)
  lazy val _cAllocateNewAddressResult = JsonScalaCodec(AllocateNewAddressResult)
  lazy val _cApiTokenCreated = JsonScalaCodec(ApiTokenCreated)
  lazy val _cApiTokenDestroied = JsonScalaCodec(ApiTokenDestroied)
  lazy val _cApiTokenNotExist = JsonScalaCodec(ApiTokenNotExist)
  lazy val _cBestAskRates = JsonScalaCodec(BestAskRates)
  lazy val _cBestBidRates = JsonScalaCodec(BestBidRates)
  lazy val _cBestBtcRatesUpdated = JsonScalaCodec(BestBtcRatesUpdated)
  lazy val _cBitcoinBlockSeen = JsonScalaCodec(BitcoinBlockSeen)
  lazy val _cBitcoinSold = JsonScalaCodec(BitcoinSold)
  lazy val _cBitcoinTxSeen = JsonScalaCodec(BitcoinTxSeen)
  lazy val _cBitwayMessage = JsonScalaCodec(BitwayMessage)
  lazy val _cBitwayRequest = JsonScalaCodec(BitwayRequest)
  lazy val _cBitwayTransferRequest = JsonScalaCodec(BitwayTransferRequest)
  lazy val _cBuyBTC = JsonScalaCodec(BuyBTC)
  lazy val _cBuyBitcoinAtL2Market = JsonScalaCodec(BuyBitcoinAtL2Market)
  lazy val _cCancelExchangeOrder = JsonScalaCodec(CancelExchangeOrder)
  lazy val _cCancelExchangeOrderResult = JsonScalaCodec(CancelExchangeOrderResult)
  lazy val _cCleanBlockChain = JsonScalaCodec(CleanBlockChain)
  lazy val _cCreateAccount = JsonScalaCodec(CreateAccount)
  lazy val _cCreateAccountResult = JsonScalaCodec(CreateAccountResult)
  lazy val _cCreateApiToken = JsonScalaCodec(CreateApiToken)
  lazy val _cCreateDepthMakerStrategy = JsonScalaCodec(CreateDepthMakerStrategy)
  lazy val _cCreateInvoice = JsonScalaCodec(CreateInvoice)
  lazy val _cCreateSimpleExchangeStrategy = JsonScalaCodec(CreateSimpleExchangeStrategy)
  lazy val _cCryptoCurrencyBlockMessage = JsonScalaCodec(CryptoCurrencyBlockMessage)
  lazy val _cCryptoTransferResult = JsonScalaCodec(CryptoTransferResult)
  lazy val _cCurrentExchangeRateResult = JsonScalaCodec(CurrentExchangeRateResult)
  lazy val _cDepthUpdated = JsonScalaCodec(DepthUpdated)
  lazy val _cDestoryAllApiTokens = JsonScalaCodec(DestoryAllApiTokens)
  lazy val _cDestoryApiToken = JsonScalaCodec(DestoryApiToken)
  lazy val _cDisableAccount = JsonScalaCodec(DisableAccount)
  lazy val _cDoCancelSettle = JsonScalaCodec(DoCancelSettle)
  lazy val _cDoCancelTransfer = JsonScalaCodec(DoCancelTransfer)
  lazy val _cDoLogin = JsonScalaCodec(DoLogin)
  lazy val _cDoPaymentRequest = JsonScalaCodec(DoPaymentRequest)
  lazy val _cDoRegister = JsonScalaCodec(DoRegister)
  lazy val _cDoRequestPasswordReset = JsonScalaCodec(DoRequestPasswordReset)
  lazy val _cDoResetPassword = JsonScalaCodec(DoResetPassword)
  lazy val _cDoSendCoin = JsonScalaCodec(DoSendCoin)
  lazy val _cDoSendEmail = JsonScalaCodec(DoSendEmail)
  lazy val _cDoSetMerchantStatus = JsonScalaCodec(DoSetMerchantStatus)
  lazy val _cDoUpdateMerchant = JsonScalaCodec(DoUpdateMerchant)
  lazy val _cDoUpdateMerchantFee = JsonScalaCodec(DoUpdateMerchantFee)
  lazy val _cDoValidateRegister = JsonScalaCodec(DoValidateRegister)
  lazy val _cDumpStateToFile = JsonScalaCodec(DumpStateToFile)
  lazy val _cFetchAddresses = JsonScalaCodec(FetchAddresses)
  lazy val _cFetchDepth = JsonScalaCodec(FetchDepth)
  lazy val _cGenerateAddresses = JsonScalaCodec(GenerateAddresses)
  lazy val _cGenerateAddressesResult = JsonScalaCodec(GenerateAddressesResult)
  lazy val _cGetAllOpeningOrders = JsonScalaCodec(GetAllOpeningOrders)
  lazy val _cGetAllOpeningOrdersResult = JsonScalaCodec(GetAllOpeningOrdersResult)
  lazy val _cGetAssets = JsonScalaCodec(GetAssets)
  lazy val _cGetAssetsResult = JsonScalaCodec(GetAssetsResult)
  lazy val _cGetBestAskRates = JsonScalaCodec(GetBestAskRates)
  lazy val _cGetBestBidRates = JsonScalaCodec(GetBestBidRates)
  lazy val _cGetCurrentExchangeRate = JsonScalaCodec(GetCurrentExchangeRate)
  lazy val _cGetDepth = JsonScalaCodec(GetDepth)
  lazy val _cGetDepthResult = JsonScalaCodec(GetDepthResult)
  lazy val _cGetDepths = JsonScalaCodec(GetDepths)
  lazy val _cGetDepthsResult = JsonScalaCodec(GetDepthsResult)
  lazy val _cGetExchangeHealth = JsonScalaCodec(GetExchangeHealth)
  lazy val _cGetExchangeHealthResult = JsonScalaCodec(GetExchangeHealthResult)
  lazy val _cGetMissedCryptoCurrencyBlocks = JsonScalaCodec(GetMissedCryptoCurrencyBlocks)
  lazy val _cGetPlatformBalances = JsonScalaCodec(GetPlatformBalances)
  lazy val _cInvoiceComplete = JsonScalaCodec(InvoiceComplete)
  lazy val _cInvoiceCreated = JsonScalaCodec(InvoiceCreated)
  lazy val _cInvoiceCreationFailed = JsonScalaCodec(InvoiceCreationFailed)
  lazy val _cInvoiceDebugRequest = JsonScalaCodec(InvoiceDebugRequest)
  lazy val _cInvoicePartialUpdate = JsonScalaCodec(InvoicePartialUpdate)
  lazy val _cInvoiceStatusChanged = JsonScalaCodec(InvoiceStatusChanged)
  lazy val _cInvoiceUpdated = JsonScalaCodec(InvoiceUpdated)
  lazy val _cListenAtRedis = JsonScalaCodec(ListenAtRedis)
  lazy val _cLockAccountRequest = JsonScalaCodec(LockAccountRequest)
  lazy val _cLockAccountResult = JsonScalaCodec(LockAccountResult)
  lazy val _cLockCoinRequest = JsonScalaCodec(LockCoinRequest)
  lazy val _cLockCoinResult = JsonScalaCodec(LockCoinResult)
  lazy val _cLoginFailed = JsonScalaCodec(LoginFailed)
  lazy val _cLoginSucceeded = JsonScalaCodec(LoginSucceeded)
  lazy val _cMarketDataUpdated = JsonScalaCodec(MarketDataUpdated)
  lazy val _cMerchantBalanceRequest = JsonScalaCodec(MerchantBalanceRequest)
  lazy val _cMerchantBalanceResult = JsonScalaCodec(MerchantBalanceResult)
  lazy val _cMerchantRefund = JsonScalaCodec(MerchantRefund)
  lazy val _cMerchantSettle = JsonScalaCodec(MerchantSettle)
  lazy val _cMessageNotSupported = JsonScalaCodec(MessageNotSupported)
  lazy val _cMigrateSecretKey = JsonScalaCodec(MigrateSecretKey)
  lazy val _cMultiCryptoCurrencyTransactionMessage = JsonScalaCodec(MultiCryptoCurrencyTransactionMessage)
  lazy val _cMultiTransferCryptoCurrency = JsonScalaCodec(MultiTransferCryptoCurrency)
  lazy val _cMultiTransferCryptoCurrencyResult = JsonScalaCodec(MultiTransferCryptoCurrencyResult)
  lazy val _cNotifyMerchants = JsonScalaCodec(NotifyMerchants)
  lazy val _cNotifyPayments = JsonScalaCodec(NotifyPayments)
  lazy val _cOpeningOrdersReceived = JsonScalaCodec(OpeningOrdersReceived)
  lazy val _cOrderLogisticsUpdated = JsonScalaCodec(OrderLogisticsUpdated)
  lazy val _cOrderLogisticsUpdatedResult = JsonScalaCodec(OrderLogisticsUpdatedResult)
  lazy val _cPaymentMessage = JsonScalaCodec(PaymentMessage)
  lazy val _cPaymentReceived = JsonScalaCodec(PaymentReceived)
  lazy val _cPingFeProxy = JsonScalaCodec(PingFeProxy)
  lazy val _cPlatformBalanceUpdated = JsonScalaCodec(PlatformBalanceUpdated)
  lazy val _cQuantMessage = JsonScalaCodec(QuantMessage)
  lazy val _cQueryAccount = JsonScalaCodec(QueryAccount)
  lazy val _cQueryAccountResult = JsonScalaCodec(QueryAccountResult)
  lazy val _cQueryAccountsById = JsonScalaCodec(QueryAccountsById)
  lazy val _cQueryAccountsByIdResult = JsonScalaCodec(QueryAccountsByIdResult)
  lazy val _cQueryAggregateAssets = JsonScalaCodec(QueryAggregateAssets)
  lazy val _cQueryAggregateAssetsResult = JsonScalaCodec(QueryAggregateAssetsResult)
  lazy val _cQueryAllChangeRate = JsonScalaCodec(QueryAllChangeRate)
  lazy val _cQueryAllChangeRateResult = JsonScalaCodec(QueryAllChangeRateResult)
  lazy val _cQueryAsset = JsonScalaCodec(QueryAsset)
  lazy val _cQueryAssetResult = JsonScalaCodec(QueryAssetResult)
  lazy val _cQueryBill = JsonScalaCodec(QueryBill)
  lazy val _cQueryBillResult = JsonScalaCodec(QueryBillResult)
  lazy val _cQueryBlockChainAmount = JsonScalaCodec(QueryBlockChainAmount)
  lazy val _cQueryBlockChainAmountResult = JsonScalaCodec(QueryBlockChainAmountResult)
  lazy val _cQueryChangeRate = JsonScalaCodec(QueryChangeRate)
  lazy val _cQueryChangeRateResult = JsonScalaCodec(QueryChangeRateResult)
  lazy val _cQueryInvoice = JsonScalaCodec(QueryInvoice)
  lazy val _cQueryInvoiceById = JsonScalaCodec(QueryInvoiceById)
  lazy val _cQueryInvoiceByIds = JsonScalaCodec(QueryInvoiceByIds)
  lazy val _cQueryInvoiceResult = JsonScalaCodec(QueryInvoiceResult)
  lazy val _cQueryMerchantBalance = JsonScalaCodec(QueryMerchantBalance)
  lazy val _cQueryMerchantBalanceResult = JsonScalaCodec(QueryMerchantBalanceResult)
  lazy val _cQueryMerchantById = JsonScalaCodec(QueryMerchantById)
  lazy val _cQueryMerchantResult = JsonScalaCodec(QueryMerchantResult)
  lazy val _cQueryMerchants = JsonScalaCodec(QueryMerchants)
  lazy val _cQueryMerchantsResult = JsonScalaCodec(QueryMerchantsResult)
  lazy val _cQueryOrderStatus = JsonScalaCodec(QueryOrderStatus)
  lazy val _cQueryOrderStatusResult = JsonScalaCodec(QueryOrderStatusResult)
  lazy val _cQueryRecoverStats = JsonScalaCodec(QueryRecoverStats)
  lazy val _cQuerySnapshots = JsonScalaCodec(QuerySnapshots)
  lazy val _cQuerySnapshotsResult = JsonScalaCodec(QuerySnapshotsResult)
  lazy val _cQueryTransfer = JsonScalaCodec(QueryTransfer)
  lazy val _cQueryTransferResult = JsonScalaCodec(QueryTransferResult)
  lazy val _cRegisterFailed = JsonScalaCodec(RegisterFailed)
  lazy val _cRegisterSucceeded = JsonScalaCodec(RegisterSucceeded)
  lazy val _cRequestPasswordResetFailed = JsonScalaCodec(RequestPasswordResetFailed)
  lazy val _cRequestPasswordResetSucceeded = JsonScalaCodec(RequestPasswordResetSucceeded)
  lazy val _cRequestTransferFailed = JsonScalaCodec(RequestTransferFailed)
  lazy val _cRequestTransferSucceeded = JsonScalaCodec(RequestTransferSucceeded)
  lazy val _cResendFailed = JsonScalaCodec(ResendFailed)
  lazy val _cResendNotify = JsonScalaCodec(ResendNotify)
  lazy val _cResendSuccessed = JsonScalaCodec(ResendSuccessed)
  lazy val _cResetPasswordFailed = JsonScalaCodec(ResetPasswordFailed)
  lazy val _cResetPasswordSucceeded = JsonScalaCodec(ResetPasswordSucceeded)
  lazy val _cSecretKeyUpdated = JsonScalaCodec(SecretKeyUpdated)
  lazy val _cSellBTC = JsonScalaCodec(SellBTC)
  lazy val _cSellBitcoin = JsonScalaCodec(SellBitcoin)
  lazy val _cSellBitcoinAtL2Market = JsonScalaCodec(SellBitcoinAtL2Market)
  lazy val _cSendRawTransaction = JsonScalaCodec(SendRawTransaction)
  lazy val _cSendRawTransactionResult = JsonScalaCodec(SendRawTransactionResult)
  lazy val _cSendVerificationMail = JsonScalaCodec(SendVerificationMail)
  lazy val _cSendVerificationMailSucceeded = JsonScalaCodec(SendVerificationMailSucceeded)
  lazy val _cSetMerchantStatusResult = JsonScalaCodec(SetMerchantStatusResult)
  lazy val _cSubmitExchangeOrder = JsonScalaCodec(SubmitExchangeOrder)
  lazy val _cSubmitExchangeOrderResult = JsonScalaCodec(SubmitExchangeOrderResult)
  lazy val _cSubmitTradeAction = JsonScalaCodec(SubmitTradeAction)
  lazy val _cSubmitTradeActionResult = JsonScalaCodec(SubmitTradeActionResult)
  lazy val _cSubmittedOrders = JsonScalaCodec(SubmittedOrders)
  lazy val _cSyncDepth = JsonScalaCodec(SyncDepth)
  lazy val _cSyncHotAddresses = JsonScalaCodec(SyncHotAddresses)
  lazy val _cSyncHotAddressesResult = JsonScalaCodec(SyncHotAddressesResult)
  lazy val _cSyncPrivateKeys = JsonScalaCodec(SyncPrivateKeys)
  lazy val _cSyncPrivateKeysResult = JsonScalaCodec(SyncPrivateKeysResult)
  lazy val _cTakeSnapshotNow = JsonScalaCodec(TakeSnapshotNow)
  lazy val _cTransferCryptoCurrency = JsonScalaCodec(TransferCryptoCurrency)
  lazy val _cTryFetchAddresses = JsonScalaCodec(TryFetchAddresses)
  lazy val _cTrySyncHotAddresses = JsonScalaCodec(TrySyncHotAddresses)
  lazy val _cUnlockCoinRequest = JsonScalaCodec(UnlockCoinRequest)
  lazy val _cUpdateAccount = JsonScalaCodec(UpdateAccount)
  lazy val _cUpdateAccountResult = JsonScalaCodec(UpdateAccountResult)
  lazy val _cUpdateMerchantFailed = JsonScalaCodec(UpdateMerchantFailed)
  lazy val _cUpdateMerchantSucceeded = JsonScalaCodec(UpdateMerchantSucceeded)
  lazy val _cUpdateSecretKey = JsonScalaCodec(UpdateSecretKey)
  lazy val _cValidateRegisterFailed = JsonScalaCodec(ValidateRegisterFailed)
  lazy val _cValidateRegisterSucceeded = JsonScalaCodec(ValidateRegisterSucceeded)
  lazy val _cValidateToken = JsonScalaCodec(ValidateToken)
  lazy val _cWatchInvoiceStatus = JsonScalaCodec(WatchInvoiceStatus)
  lazy val _cTAccountState = JsonScalaCodec(TAccountState)
  lazy val _cTBillWriterState = JsonScalaCodec(TBillWriterState)
  lazy val _cTBlockchainState = JsonScalaCodec(TBlockchainState)
  lazy val _cTInvoiceState = JsonScalaCodec(TInvoiceState)
  lazy val _cTNotificationState = JsonScalaCodec(TNotificationState)
  lazy val _cTSimpleState = JsonScalaCodec(TSimpleState)
  lazy val _cTTradingState = JsonScalaCodec(TTradingState)

  def toBinary(obj: AnyRef): Array[Byte] = obj match {
    case m: AccountExchange => _cAccountExchange(m)
    case m: AccountTransfer => _cAccountTransfer(m)
    case m: AccountTransfersWithMinerFee => _cAccountTransfersWithMinerFee(m)
    case m: AddressStatusResult => _cAddressStatusResult(m)
    case m: BankAccount => _cBankAccount(m)
    case m: BillItem => _cBillItem(m)
    case m: BitcoinBlock => _cBitcoinBlock(m)
    case m: BitcoinTx => _cBitcoinTx(m)
    case m: BitcoinTxPort => _cBitcoinTxPort(m)
    case m: BlockIndex => _cBlockIndex(m)
    case m: CashAccount => _cCashAccount(m)
    case m: Contact => _cContact(m)
    case m: CryptoAddress => _cCryptoAddress(m)
    case m: CryptoCurrencyBlock => _cCryptoCurrencyBlock(m)
    case m: CryptoCurrencyNetworkStatus => _cCryptoCurrencyNetworkStatus(m)
    case m: CryptoCurrencyTransaction => _cCryptoCurrencyTransaction(m)
    case m: CryptoCurrencyTransactionPort => _cCryptoCurrencyTransactionPort(m)
    case m: CryptoCurrencyTransferInfo => _cCryptoCurrencyTransferInfo(m)
    case m: CryptoCurrencyTransferItem => _cCryptoCurrencyTransferItem(m)
    case m: Cursor => _cCursor(m)
    case m: DelayedPost => _cDelayedPost(m)
    case m: Depth => _cDepth(m)
    case m: DepthItem => _cDepthItem(m)
    case m: ExchangeAccountInfo => _cExchangeAccountInfo(m)
    case m: ExchangeOrder => _cExchangeOrder(m)
    case m: ExchangeParam => _cExchangeParam(m)
    case m: ExchangeRate => _cExchangeRate(m)
    case m: Fee => _cFee(m)
    case m: GetAccountResult => _cGetAccountResult(m)
    case m: Invoice => _cInvoice(m)
    case m: InvoiceData => _cInvoiceData(m)
    case m: InvoiceNotification => _cInvoiceNotification(m)
    case m: InvoiceNotificationInfo => _cInvoiceNotificationInfo(m)
    case m: InvoiceSummary => _cInvoiceSummary(m)
    case m: InvoiceUpdate => _cInvoiceUpdate(m)
    case m: L2MarketExchangeOrder => _cL2MarketExchangeOrder(m)
    case m: Merchant => _cMerchant(m)
    case m: NotificationData => _cNotificationData(m)
    case m: Order => _cOrder(m)
    case m: OrderUpdate => _cOrderUpdate(m)
    case m: PaymentData => _cPaymentData(m)
    case m: PaymentNotification => _cPaymentNotification(m)
    case m: QuantAccount => _cQuantAccount(m)
    case m: QueryOrderResult => _cQueryOrderResult(m)
    case m: RedeliverFilterData => _cRedeliverFilterData(m)
    case m: RedeliverFilters => _cRedeliverFilters(m)
    case m: SellParam => _cSellParam(m)
    case m: SpanCursor => _cSpanCursor(m)
    case m: SubmitOrderResult => _cSubmitOrderResult(m)
    case m: TAddressStatus => _cTAddressStatus(m)
    case m: TradeAction => _cTradeAction(m)
    case m: TradePair => _cTradePair(m)
    case m: TradeStrategy => _cTradeStrategy(m)
    case m: TransferConfig => _cTransferConfig(m)
    case m: AccessDenied => _cAccessDenied(m)
    case m: AccessGranted => _cAccessGranted(m)
    case m: AccountDisabled => _cAccountDisabled(m)
    case m: AdjustAddressAmount => _cAdjustAddressAmount(m)
    case m: AdjustAddressAmountResult => _cAdjustAddressAmountResult(m)
    case m: AdjustAggregationAccount => _cAdjustAggregationAccount(m)
    case m: AdjustAggregationAccountResult => _cAdjustAggregationAccountResult(m)
    case m: AdjustMerchantAccount => _cAdjustMerchantAccount(m)
    case m: AdjustMerchantAccountResult => _cAdjustMerchantAccountResult(m)
    case m: AdminCommandResult => _cAdminCommandResult(m)
    case m: AdminConfirmTransferFailure => _cAdminConfirmTransferFailure(m)
    case m: AdminConfirmTransferSuccess => _cAdminConfirmTransferSuccess(m)
    case m: AdminSetTransferStatus => _cAdminSetTransferStatus(m)
    case m: AllApiTokensDestroied => _cAllApiTokensDestroied(m)
    case m: AllocateNewAddress => _cAllocateNewAddress(m)
    case m: AllocateNewAddressResult => _cAllocateNewAddressResult(m)
    case m: ApiTokenCreated => _cApiTokenCreated(m)
    case m: ApiTokenDestroied => _cApiTokenDestroied(m)
    case m: ApiTokenNotExist => _cApiTokenNotExist(m)
    case m: BestAskRates => _cBestAskRates(m)
    case m: BestBidRates => _cBestBidRates(m)
    case m: BestBtcRatesUpdated => _cBestBtcRatesUpdated(m)
    case m: BitcoinBlockSeen => _cBitcoinBlockSeen(m)
    case m: BitcoinSold => _cBitcoinSold(m)
    case m: BitcoinTxSeen => _cBitcoinTxSeen(m)
    case m: BitwayMessage => _cBitwayMessage(m)
    case m: BitwayRequest => _cBitwayRequest(m)
    case m: BitwayTransferRequest => _cBitwayTransferRequest(m)
    case m: BuyBTC => _cBuyBTC(m)
    case m: BuyBitcoinAtL2Market => _cBuyBitcoinAtL2Market(m)
    case m: CancelExchangeOrder => _cCancelExchangeOrder(m)
    case m: CancelExchangeOrderResult => _cCancelExchangeOrderResult(m)
    case m: CleanBlockChain => _cCleanBlockChain(m)
    case m: CreateAccount => _cCreateAccount(m)
    case m: CreateAccountResult => _cCreateAccountResult(m)
    case m: CreateApiToken => _cCreateApiToken(m)
    case m: CreateDepthMakerStrategy => _cCreateDepthMakerStrategy(m)
    case m: CreateInvoice => _cCreateInvoice(m)
    case m: CreateSimpleExchangeStrategy => _cCreateSimpleExchangeStrategy(m)
    case m: CryptoCurrencyBlockMessage => _cCryptoCurrencyBlockMessage(m)
    case m: CryptoTransferResult => _cCryptoTransferResult(m)
    case m: CurrentExchangeRateResult => _cCurrentExchangeRateResult(m)
    case m: DepthUpdated => _cDepthUpdated(m)
    case m: DestoryAllApiTokens => _cDestoryAllApiTokens(m)
    case m: DestoryApiToken => _cDestoryApiToken(m)
    case m: DisableAccount => _cDisableAccount(m)
    case m: DoCancelSettle => _cDoCancelSettle(m)
    case m: DoCancelTransfer => _cDoCancelTransfer(m)
    case m: DoLogin => _cDoLogin(m)
    case m: DoPaymentRequest => _cDoPaymentRequest(m)
    case m: DoRegister => _cDoRegister(m)
    case m: DoRequestPasswordReset => _cDoRequestPasswordReset(m)
    case m: DoResetPassword => _cDoResetPassword(m)
    case m: DoSendCoin => _cDoSendCoin(m)
    case m: DoSendEmail => _cDoSendEmail(m)
    case m: DoSetMerchantStatus => _cDoSetMerchantStatus(m)
    case m: DoUpdateMerchant => _cDoUpdateMerchant(m)
    case m: DoUpdateMerchantFee => _cDoUpdateMerchantFee(m)
    case m: DoValidateRegister => _cDoValidateRegister(m)
    case m: DumpStateToFile => _cDumpStateToFile(m)
    case m: FetchAddresses => _cFetchAddresses(m)
    case m: FetchDepth => _cFetchDepth(m)
    case m: GenerateAddresses => _cGenerateAddresses(m)
    case m: GenerateAddressesResult => _cGenerateAddressesResult(m)
    case m: GetAllOpeningOrders => _cGetAllOpeningOrders(m)
    case m: GetAllOpeningOrdersResult => _cGetAllOpeningOrdersResult(m)
    case m: GetAssets => _cGetAssets(m)
    case m: GetAssetsResult => _cGetAssetsResult(m)
    case m: GetBestAskRates => _cGetBestAskRates(m)
    case m: GetBestBidRates => _cGetBestBidRates(m)
    case m: GetCurrentExchangeRate => _cGetCurrentExchangeRate(m)
    case m: GetDepth => _cGetDepth(m)
    case m: GetDepthResult => _cGetDepthResult(m)
    case m: GetDepths => _cGetDepths(m)
    case m: GetDepthsResult => _cGetDepthsResult(m)
    case m: GetExchangeHealth => _cGetExchangeHealth(m)
    case m: GetExchangeHealthResult => _cGetExchangeHealthResult(m)
    case m: GetMissedCryptoCurrencyBlocks => _cGetMissedCryptoCurrencyBlocks(m)
    case m: GetPlatformBalances => _cGetPlatformBalances(m)
    case m: InvoiceComplete => _cInvoiceComplete(m)
    case m: InvoiceCreated => _cInvoiceCreated(m)
    case m: InvoiceCreationFailed => _cInvoiceCreationFailed(m)
    case m: InvoiceDebugRequest => _cInvoiceDebugRequest(m)
    case m: InvoicePartialUpdate => _cInvoicePartialUpdate(m)
    case m: InvoiceStatusChanged => _cInvoiceStatusChanged(m)
    case m: InvoiceUpdated => _cInvoiceUpdated(m)
    case m: ListenAtRedis => _cListenAtRedis(m)
    case m: LockAccountRequest => _cLockAccountRequest(m)
    case m: LockAccountResult => _cLockAccountResult(m)
    case m: LockCoinRequest => _cLockCoinRequest(m)
    case m: LockCoinResult => _cLockCoinResult(m)
    case m: LoginFailed => _cLoginFailed(m)
    case m: LoginSucceeded => _cLoginSucceeded(m)
    case m: MarketDataUpdated => _cMarketDataUpdated(m)
    case m: MerchantBalanceRequest => _cMerchantBalanceRequest(m)
    case m: MerchantBalanceResult => _cMerchantBalanceResult(m)
    case m: MerchantRefund => _cMerchantRefund(m)
    case m: MerchantSettle => _cMerchantSettle(m)
    case m: MessageNotSupported => _cMessageNotSupported(m)
    case m: MigrateSecretKey => _cMigrateSecretKey(m)
    case m: MultiCryptoCurrencyTransactionMessage => _cMultiCryptoCurrencyTransactionMessage(m)
    case m: MultiTransferCryptoCurrency => _cMultiTransferCryptoCurrency(m)
    case m: MultiTransferCryptoCurrencyResult => _cMultiTransferCryptoCurrencyResult(m)
    case m: NotifyMerchants => _cNotifyMerchants(m)
    case m: NotifyPayments => _cNotifyPayments(m)
    case m: OpeningOrdersReceived => _cOpeningOrdersReceived(m)
    case m: OrderLogisticsUpdated => _cOrderLogisticsUpdated(m)
    case m: OrderLogisticsUpdatedResult => _cOrderLogisticsUpdatedResult(m)
    case m: PaymentMessage => _cPaymentMessage(m)
    case m: PaymentReceived => _cPaymentReceived(m)
    case m: PingFeProxy => _cPingFeProxy(m)
    case m: PlatformBalanceUpdated => _cPlatformBalanceUpdated(m)
    case m: QuantMessage => _cQuantMessage(m)
    case m: QueryAccount => _cQueryAccount(m)
    case m: QueryAccountResult => _cQueryAccountResult(m)
    case m: QueryAccountsById => _cQueryAccountsById(m)
    case m: QueryAccountsByIdResult => _cQueryAccountsByIdResult(m)
    case m: QueryAggregateAssets => _cQueryAggregateAssets(m)
    case m: QueryAggregateAssetsResult => _cQueryAggregateAssetsResult(m)
    case m: QueryAllChangeRate => _cQueryAllChangeRate(m)
    case m: QueryAllChangeRateResult => _cQueryAllChangeRateResult(m)
    case m: QueryAsset => _cQueryAsset(m)
    case m: QueryAssetResult => _cQueryAssetResult(m)
    case m: QueryBill => _cQueryBill(m)
    case m: QueryBillResult => _cQueryBillResult(m)
    case m: QueryBlockChainAmount => _cQueryBlockChainAmount(m)
    case m: QueryBlockChainAmountResult => _cQueryBlockChainAmountResult(m)
    case m: QueryChangeRate => _cQueryChangeRate(m)
    case m: QueryChangeRateResult => _cQueryChangeRateResult(m)
    case m: QueryInvoice => _cQueryInvoice(m)
    case m: QueryInvoiceById => _cQueryInvoiceById(m)
    case m: QueryInvoiceByIds => _cQueryInvoiceByIds(m)
    case m: QueryInvoiceResult => _cQueryInvoiceResult(m)
    case m: QueryMerchantBalance => _cQueryMerchantBalance(m)
    case m: QueryMerchantBalanceResult => _cQueryMerchantBalanceResult(m)
    case m: QueryMerchantById => _cQueryMerchantById(m)
    case m: QueryMerchantResult => _cQueryMerchantResult(m)
    case m: QueryMerchants => _cQueryMerchants(m)
    case m: QueryMerchantsResult => _cQueryMerchantsResult(m)
    case m: QueryOrderStatus => _cQueryOrderStatus(m)
    case m: QueryOrderStatusResult => _cQueryOrderStatusResult(m)
    case m: QueryRecoverStats => _cQueryRecoverStats(m)
    case m: QuerySnapshots => _cQuerySnapshots(m)
    case m: QuerySnapshotsResult => _cQuerySnapshotsResult(m)
    case m: QueryTransfer => _cQueryTransfer(m)
    case m: QueryTransferResult => _cQueryTransferResult(m)
    case m: RegisterFailed => _cRegisterFailed(m)
    case m: RegisterSucceeded => _cRegisterSucceeded(m)
    case m: RequestPasswordResetFailed => _cRequestPasswordResetFailed(m)
    case m: RequestPasswordResetSucceeded => _cRequestPasswordResetSucceeded(m)
    case m: RequestTransferFailed => _cRequestTransferFailed(m)
    case m: RequestTransferSucceeded => _cRequestTransferSucceeded(m)
    case m: ResendFailed => _cResendFailed(m)
    case m: ResendNotify => _cResendNotify(m)
    case m: ResendSuccessed => _cResendSuccessed(m)
    case m: ResetPasswordFailed => _cResetPasswordFailed(m)
    case m: ResetPasswordSucceeded => _cResetPasswordSucceeded(m)
    case m: SecretKeyUpdated => _cSecretKeyUpdated(m)
    case m: SellBTC => _cSellBTC(m)
    case m: SellBitcoin => _cSellBitcoin(m)
    case m: SellBitcoinAtL2Market => _cSellBitcoinAtL2Market(m)
    case m: SendRawTransaction => _cSendRawTransaction(m)
    case m: SendRawTransactionResult => _cSendRawTransactionResult(m)
    case m: SendVerificationMail => _cSendVerificationMail(m)
    case m: SendVerificationMailSucceeded => _cSendVerificationMailSucceeded(m)
    case m: SetMerchantStatusResult => _cSetMerchantStatusResult(m)
    case m: SubmitExchangeOrder => _cSubmitExchangeOrder(m)
    case m: SubmitExchangeOrderResult => _cSubmitExchangeOrderResult(m)
    case m: SubmitTradeAction => _cSubmitTradeAction(m)
    case m: SubmitTradeActionResult => _cSubmitTradeActionResult(m)
    case m: SubmittedOrders => _cSubmittedOrders(m)
    case m: SyncDepth => _cSyncDepth(m)
    case m: SyncHotAddresses => _cSyncHotAddresses(m)
    case m: SyncHotAddressesResult => _cSyncHotAddressesResult(m)
    case m: SyncPrivateKeys => _cSyncPrivateKeys(m)
    case m: SyncPrivateKeysResult => _cSyncPrivateKeysResult(m)
    case m: TakeSnapshotNow => _cTakeSnapshotNow(m)
    case m: TransferCryptoCurrency => _cTransferCryptoCurrency(m)
    case m: TryFetchAddresses => _cTryFetchAddresses(m)
    case m: TrySyncHotAddresses => _cTrySyncHotAddresses(m)
    case m: UnlockCoinRequest => _cUnlockCoinRequest(m)
    case m: UpdateAccount => _cUpdateAccount(m)
    case m: UpdateAccountResult => _cUpdateAccountResult(m)
    case m: UpdateMerchantFailed => _cUpdateMerchantFailed(m)
    case m: UpdateMerchantSucceeded => _cUpdateMerchantSucceeded(m)
    case m: UpdateSecretKey => _cUpdateSecretKey(m)
    case m: ValidateRegisterFailed => _cValidateRegisterFailed(m)
    case m: ValidateRegisterSucceeded => _cValidateRegisterSucceeded(m)
    case m: ValidateToken => _cValidateToken(m)
    case m: WatchInvoiceStatus => _cWatchInvoiceStatus(m)
    case m: TAccountState => _cTAccountState(m)
    case m: TBillWriterState => _cTBillWriterState(m)
    case m: TBlockchainState => _cTBlockchainState(m)
    case m: TInvoiceState => _cTInvoiceState(m)
    case m: TNotificationState => _cTNotificationState(m)
    case m: TSimpleState => _cTSimpleState(m)
    case m: TTradingState => _cTTradingState(m)

    case m => throw new IllegalArgumentException("Cannot serialize object: " + m)
  }

  def fromBinary(bytes: Array[Byte],
    clazz: Option[Class[_]]): AnyRef = clazz match {
    case Some(c) if c == classOf[AccountExchange.Immutable] => _cAccountExchange.invert(bytes).get
    case Some(c) if c == classOf[AccountTransfer.Immutable] => _cAccountTransfer.invert(bytes).get
    case Some(c) if c == classOf[AccountTransfersWithMinerFee.Immutable] => _cAccountTransfersWithMinerFee.invert(bytes).get
    case Some(c) if c == classOf[AddressStatusResult.Immutable] => _cAddressStatusResult.invert(bytes).get
    case Some(c) if c == classOf[BankAccount.Immutable] => _cBankAccount.invert(bytes).get
    case Some(c) if c == classOf[BillItem.Immutable] => _cBillItem.invert(bytes).get
    case Some(c) if c == classOf[BitcoinBlock.Immutable] => _cBitcoinBlock.invert(bytes).get
    case Some(c) if c == classOf[BitcoinTx.Immutable] => _cBitcoinTx.invert(bytes).get
    case Some(c) if c == classOf[BitcoinTxPort.Immutable] => _cBitcoinTxPort.invert(bytes).get
    case Some(c) if c == classOf[BlockIndex.Immutable] => _cBlockIndex.invert(bytes).get
    case Some(c) if c == classOf[CashAccount.Immutable] => _cCashAccount.invert(bytes).get
    case Some(c) if c == classOf[Contact.Immutable] => _cContact.invert(bytes).get
    case Some(c) if c == classOf[CryptoAddress.Immutable] => _cCryptoAddress.invert(bytes).get
    case Some(c) if c == classOf[CryptoCurrencyBlock.Immutable] => _cCryptoCurrencyBlock.invert(bytes).get
    case Some(c) if c == classOf[CryptoCurrencyNetworkStatus.Immutable] => _cCryptoCurrencyNetworkStatus.invert(bytes).get
    case Some(c) if c == classOf[CryptoCurrencyTransaction.Immutable] => _cCryptoCurrencyTransaction.invert(bytes).get
    case Some(c) if c == classOf[CryptoCurrencyTransactionPort.Immutable] => _cCryptoCurrencyTransactionPort.invert(bytes).get
    case Some(c) if c == classOf[CryptoCurrencyTransferInfo.Immutable] => _cCryptoCurrencyTransferInfo.invert(bytes).get
    case Some(c) if c == classOf[CryptoCurrencyTransferItem.Immutable] => _cCryptoCurrencyTransferItem.invert(bytes).get
    case Some(c) if c == classOf[Cursor.Immutable] => _cCursor.invert(bytes).get
    case Some(c) if c == classOf[DelayedPost.Immutable] => _cDelayedPost.invert(bytes).get
    case Some(c) if c == classOf[Depth.Immutable] => _cDepth.invert(bytes).get
    case Some(c) if c == classOf[DepthItem.Immutable] => _cDepthItem.invert(bytes).get
    case Some(c) if c == classOf[ExchangeAccountInfo.Immutable] => _cExchangeAccountInfo.invert(bytes).get
    case Some(c) if c == classOf[ExchangeOrder.Immutable] => _cExchangeOrder.invert(bytes).get
    case Some(c) if c == classOf[ExchangeParam.Immutable] => _cExchangeParam.invert(bytes).get
    case Some(c) if c == classOf[ExchangeRate.Immutable] => _cExchangeRate.invert(bytes).get
    case Some(c) if c == classOf[Fee.Immutable] => _cFee.invert(bytes).get
    case Some(c) if c == classOf[GetAccountResult.Immutable] => _cGetAccountResult.invert(bytes).get
    case Some(c) if c == classOf[Invoice.Immutable] => _cInvoice.invert(bytes).get
    case Some(c) if c == classOf[InvoiceData.Immutable] => _cInvoiceData.invert(bytes).get
    case Some(c) if c == classOf[InvoiceNotification.Immutable] => _cInvoiceNotification.invert(bytes).get
    case Some(c) if c == classOf[InvoiceNotificationInfo.Immutable] => _cInvoiceNotificationInfo.invert(bytes).get
    case Some(c) if c == classOf[InvoiceSummary.Immutable] => _cInvoiceSummary.invert(bytes).get
    case Some(c) if c == classOf[InvoiceUpdate.Immutable] => _cInvoiceUpdate.invert(bytes).get
    case Some(c) if c == classOf[L2MarketExchangeOrder.Immutable] => _cL2MarketExchangeOrder.invert(bytes).get
    case Some(c) if c == classOf[Merchant.Immutable] => _cMerchant.invert(bytes).get
    case Some(c) if c == classOf[NotificationData.Immutable] => _cNotificationData.invert(bytes).get
    case Some(c) if c == classOf[Order.Immutable] => _cOrder.invert(bytes).get
    case Some(c) if c == classOf[OrderUpdate.Immutable] => _cOrderUpdate.invert(bytes).get
    case Some(c) if c == classOf[PaymentData.Immutable] => _cPaymentData.invert(bytes).get
    case Some(c) if c == classOf[PaymentNotification.Immutable] => _cPaymentNotification.invert(bytes).get
    case Some(c) if c == classOf[QuantAccount.Immutable] => _cQuantAccount.invert(bytes).get
    case Some(c) if c == classOf[QueryOrderResult.Immutable] => _cQueryOrderResult.invert(bytes).get
    case Some(c) if c == classOf[RedeliverFilterData.Immutable] => _cRedeliverFilterData.invert(bytes).get
    case Some(c) if c == classOf[RedeliverFilters.Immutable] => _cRedeliverFilters.invert(bytes).get
    case Some(c) if c == classOf[SellParam.Immutable] => _cSellParam.invert(bytes).get
    case Some(c) if c == classOf[SpanCursor.Immutable] => _cSpanCursor.invert(bytes).get
    case Some(c) if c == classOf[SubmitOrderResult.Immutable] => _cSubmitOrderResult.invert(bytes).get
    case Some(c) if c == classOf[TAddressStatus.Immutable] => _cTAddressStatus.invert(bytes).get
    case Some(c) if c == classOf[TradeAction.Immutable] => _cTradeAction.invert(bytes).get
    case Some(c) if c == classOf[TradePair.Immutable] => _cTradePair.invert(bytes).get
    case Some(c) if c == classOf[TradeStrategy.Immutable] => _cTradeStrategy.invert(bytes).get
    case Some(c) if c == classOf[TransferConfig.Immutable] => _cTransferConfig.invert(bytes).get
    case Some(c) if c == classOf[AccessDenied.Immutable] => _cAccessDenied.invert(bytes).get
    case Some(c) if c == classOf[AccessGranted.Immutable] => _cAccessGranted.invert(bytes).get
    case Some(c) if c == classOf[AccountDisabled.Immutable] => _cAccountDisabled.invert(bytes).get
    case Some(c) if c == classOf[AdjustAddressAmount.Immutable] => _cAdjustAddressAmount.invert(bytes).get
    case Some(c) if c == classOf[AdjustAddressAmountResult.Immutable] => _cAdjustAddressAmountResult.invert(bytes).get
    case Some(c) if c == classOf[AdjustAggregationAccount.Immutable] => _cAdjustAggregationAccount.invert(bytes).get
    case Some(c) if c == classOf[AdjustAggregationAccountResult.Immutable] => _cAdjustAggregationAccountResult.invert(bytes).get
    case Some(c) if c == classOf[AdjustMerchantAccount.Immutable] => _cAdjustMerchantAccount.invert(bytes).get
    case Some(c) if c == classOf[AdjustMerchantAccountResult.Immutable] => _cAdjustMerchantAccountResult.invert(bytes).get
    case Some(c) if c == classOf[AdminCommandResult.Immutable] => _cAdminCommandResult.invert(bytes).get
    case Some(c) if c == classOf[AdminConfirmTransferFailure.Immutable] => _cAdminConfirmTransferFailure.invert(bytes).get
    case Some(c) if c == classOf[AdminConfirmTransferSuccess.Immutable] => _cAdminConfirmTransferSuccess.invert(bytes).get
    case Some(c) if c == classOf[AdminSetTransferStatus.Immutable] => _cAdminSetTransferStatus.invert(bytes).get
    case Some(c) if c == classOf[AllApiTokensDestroied.Immutable] => _cAllApiTokensDestroied.invert(bytes).get
    case Some(c) if c == classOf[AllocateNewAddress.Immutable] => _cAllocateNewAddress.invert(bytes).get
    case Some(c) if c == classOf[AllocateNewAddressResult.Immutable] => _cAllocateNewAddressResult.invert(bytes).get
    case Some(c) if c == classOf[ApiTokenCreated.Immutable] => _cApiTokenCreated.invert(bytes).get
    case Some(c) if c == classOf[ApiTokenDestroied.Immutable] => _cApiTokenDestroied.invert(bytes).get
    case Some(c) if c == classOf[ApiTokenNotExist.Immutable] => _cApiTokenNotExist.invert(bytes).get
    case Some(c) if c == classOf[BestAskRates.Immutable] => _cBestAskRates.invert(bytes).get
    case Some(c) if c == classOf[BestBidRates.Immutable] => _cBestBidRates.invert(bytes).get
    case Some(c) if c == classOf[BestBtcRatesUpdated.Immutable] => _cBestBtcRatesUpdated.invert(bytes).get
    case Some(c) if c == classOf[BitcoinBlockSeen.Immutable] => _cBitcoinBlockSeen.invert(bytes).get
    case Some(c) if c == classOf[BitcoinSold.Immutable] => _cBitcoinSold.invert(bytes).get
    case Some(c) if c == classOf[BitcoinTxSeen.Immutable] => _cBitcoinTxSeen.invert(bytes).get
    case Some(c) if c == classOf[BitwayMessage.Immutable] => _cBitwayMessage.invert(bytes).get
    case Some(c) if c == classOf[BitwayRequest.Immutable] => _cBitwayRequest.invert(bytes).get
    case Some(c) if c == classOf[BitwayTransferRequest.Immutable] => _cBitwayTransferRequest.invert(bytes).get
    case Some(c) if c == classOf[BuyBTC.Immutable] => _cBuyBTC.invert(bytes).get
    case Some(c) if c == classOf[BuyBitcoinAtL2Market.Immutable] => _cBuyBitcoinAtL2Market.invert(bytes).get
    case Some(c) if c == classOf[CancelExchangeOrder.Immutable] => _cCancelExchangeOrder.invert(bytes).get
    case Some(c) if c == classOf[CancelExchangeOrderResult.Immutable] => _cCancelExchangeOrderResult.invert(bytes).get
    case Some(c) if c == classOf[CleanBlockChain.Immutable] => _cCleanBlockChain.invert(bytes).get
    case Some(c) if c == classOf[CreateAccount.Immutable] => _cCreateAccount.invert(bytes).get
    case Some(c) if c == classOf[CreateAccountResult.Immutable] => _cCreateAccountResult.invert(bytes).get
    case Some(c) if c == classOf[CreateApiToken.Immutable] => _cCreateApiToken.invert(bytes).get
    case Some(c) if c == classOf[CreateDepthMakerStrategy.Immutable] => _cCreateDepthMakerStrategy.invert(bytes).get
    case Some(c) if c == classOf[CreateInvoice.Immutable] => _cCreateInvoice.invert(bytes).get
    case Some(c) if c == classOf[CreateSimpleExchangeStrategy.Immutable] => _cCreateSimpleExchangeStrategy.invert(bytes).get
    case Some(c) if c == classOf[CryptoCurrencyBlockMessage.Immutable] => _cCryptoCurrencyBlockMessage.invert(bytes).get
    case Some(c) if c == classOf[CryptoTransferResult.Immutable] => _cCryptoTransferResult.invert(bytes).get
    case Some(c) if c == classOf[CurrentExchangeRateResult.Immutable] => _cCurrentExchangeRateResult.invert(bytes).get
    case Some(c) if c == classOf[DepthUpdated.Immutable] => _cDepthUpdated.invert(bytes).get
    case Some(c) if c == classOf[DestoryAllApiTokens.Immutable] => _cDestoryAllApiTokens.invert(bytes).get
    case Some(c) if c == classOf[DestoryApiToken.Immutable] => _cDestoryApiToken.invert(bytes).get
    case Some(c) if c == classOf[DisableAccount.Immutable] => _cDisableAccount.invert(bytes).get
    case Some(c) if c == classOf[DoCancelSettle.Immutable] => _cDoCancelSettle.invert(bytes).get
    case Some(c) if c == classOf[DoCancelTransfer.Immutable] => _cDoCancelTransfer.invert(bytes).get
    case Some(c) if c == classOf[DoLogin.Immutable] => _cDoLogin.invert(bytes).get
    case Some(c) if c == classOf[DoPaymentRequest.Immutable] => _cDoPaymentRequest.invert(bytes).get
    case Some(c) if c == classOf[DoRegister.Immutable] => _cDoRegister.invert(bytes).get
    case Some(c) if c == classOf[DoRequestPasswordReset.Immutable] => _cDoRequestPasswordReset.invert(bytes).get
    case Some(c) if c == classOf[DoResetPassword.Immutable] => _cDoResetPassword.invert(bytes).get
    case Some(c) if c == classOf[DoSendCoin.Immutable] => _cDoSendCoin.invert(bytes).get
    case Some(c) if c == classOf[DoSendEmail.Immutable] => _cDoSendEmail.invert(bytes).get
    case Some(c) if c == classOf[DoSetMerchantStatus.Immutable] => _cDoSetMerchantStatus.invert(bytes).get
    case Some(c) if c == classOf[DoUpdateMerchant.Immutable] => _cDoUpdateMerchant.invert(bytes).get
    case Some(c) if c == classOf[DoUpdateMerchantFee.Immutable] => _cDoUpdateMerchantFee.invert(bytes).get
    case Some(c) if c == classOf[DoValidateRegister.Immutable] => _cDoValidateRegister.invert(bytes).get
    case Some(c) if c == classOf[DumpStateToFile.Immutable] => _cDumpStateToFile.invert(bytes).get
    case Some(c) if c == classOf[FetchAddresses.Immutable] => _cFetchAddresses.invert(bytes).get
    case Some(c) if c == classOf[FetchDepth.Immutable] => _cFetchDepth.invert(bytes).get
    case Some(c) if c == classOf[GenerateAddresses.Immutable] => _cGenerateAddresses.invert(bytes).get
    case Some(c) if c == classOf[GenerateAddressesResult.Immutable] => _cGenerateAddressesResult.invert(bytes).get
    case Some(c) if c == classOf[GetAllOpeningOrders.Immutable] => _cGetAllOpeningOrders.invert(bytes).get
    case Some(c) if c == classOf[GetAllOpeningOrdersResult.Immutable] => _cGetAllOpeningOrdersResult.invert(bytes).get
    case Some(c) if c == classOf[GetAssets.Immutable] => _cGetAssets.invert(bytes).get
    case Some(c) if c == classOf[GetAssetsResult.Immutable] => _cGetAssetsResult.invert(bytes).get
    case Some(c) if c == classOf[GetBestAskRates.Immutable] => _cGetBestAskRates.invert(bytes).get
    case Some(c) if c == classOf[GetBestBidRates.Immutable] => _cGetBestBidRates.invert(bytes).get
    case Some(c) if c == classOf[GetCurrentExchangeRate.Immutable] => _cGetCurrentExchangeRate.invert(bytes).get
    case Some(c) if c == classOf[GetDepth.Immutable] => _cGetDepth.invert(bytes).get
    case Some(c) if c == classOf[GetDepthResult.Immutable] => _cGetDepthResult.invert(bytes).get
    case Some(c) if c == classOf[GetDepths.Immutable] => _cGetDepths.invert(bytes).get
    case Some(c) if c == classOf[GetDepthsResult.Immutable] => _cGetDepthsResult.invert(bytes).get
    case Some(c) if c == classOf[GetExchangeHealth.Immutable] => _cGetExchangeHealth.invert(bytes).get
    case Some(c) if c == classOf[GetExchangeHealthResult.Immutable] => _cGetExchangeHealthResult.invert(bytes).get
    case Some(c) if c == classOf[GetMissedCryptoCurrencyBlocks.Immutable] => _cGetMissedCryptoCurrencyBlocks.invert(bytes).get
    case Some(c) if c == classOf[GetPlatformBalances.Immutable] => _cGetPlatformBalances.invert(bytes).get
    case Some(c) if c == classOf[InvoiceComplete.Immutable] => _cInvoiceComplete.invert(bytes).get
    case Some(c) if c == classOf[InvoiceCreated.Immutable] => _cInvoiceCreated.invert(bytes).get
    case Some(c) if c == classOf[InvoiceCreationFailed.Immutable] => _cInvoiceCreationFailed.invert(bytes).get
    case Some(c) if c == classOf[InvoiceDebugRequest.Immutable] => _cInvoiceDebugRequest.invert(bytes).get
    case Some(c) if c == classOf[InvoicePartialUpdate.Immutable] => _cInvoicePartialUpdate.invert(bytes).get
    case Some(c) if c == classOf[InvoiceStatusChanged.Immutable] => _cInvoiceStatusChanged.invert(bytes).get
    case Some(c) if c == classOf[InvoiceUpdated.Immutable] => _cInvoiceUpdated.invert(bytes).get
    case Some(c) if c == classOf[ListenAtRedis.Immutable] => _cListenAtRedis.invert(bytes).get
    case Some(c) if c == classOf[LockAccountRequest.Immutable] => _cLockAccountRequest.invert(bytes).get
    case Some(c) if c == classOf[LockAccountResult.Immutable] => _cLockAccountResult.invert(bytes).get
    case Some(c) if c == classOf[LockCoinRequest.Immutable] => _cLockCoinRequest.invert(bytes).get
    case Some(c) if c == classOf[LockCoinResult.Immutable] => _cLockCoinResult.invert(bytes).get
    case Some(c) if c == classOf[LoginFailed.Immutable] => _cLoginFailed.invert(bytes).get
    case Some(c) if c == classOf[LoginSucceeded.Immutable] => _cLoginSucceeded.invert(bytes).get
    case Some(c) if c == classOf[MarketDataUpdated.Immutable] => _cMarketDataUpdated.invert(bytes).get
    case Some(c) if c == classOf[MerchantBalanceRequest.Immutable] => _cMerchantBalanceRequest.invert(bytes).get
    case Some(c) if c == classOf[MerchantBalanceResult.Immutable] => _cMerchantBalanceResult.invert(bytes).get
    case Some(c) if c == classOf[MerchantRefund.Immutable] => _cMerchantRefund.invert(bytes).get
    case Some(c) if c == classOf[MerchantSettle.Immutable] => _cMerchantSettle.invert(bytes).get
    case Some(c) if c == classOf[MessageNotSupported.Immutable] => _cMessageNotSupported.invert(bytes).get
    case Some(c) if c == classOf[MigrateSecretKey.Immutable] => _cMigrateSecretKey.invert(bytes).get
    case Some(c) if c == classOf[MultiCryptoCurrencyTransactionMessage.Immutable] => _cMultiCryptoCurrencyTransactionMessage.invert(bytes).get
    case Some(c) if c == classOf[MultiTransferCryptoCurrency.Immutable] => _cMultiTransferCryptoCurrency.invert(bytes).get
    case Some(c) if c == classOf[MultiTransferCryptoCurrencyResult.Immutable] => _cMultiTransferCryptoCurrencyResult.invert(bytes).get
    case Some(c) if c == classOf[NotifyMerchants.Immutable] => _cNotifyMerchants.invert(bytes).get
    case Some(c) if c == classOf[NotifyPayments.Immutable] => _cNotifyPayments.invert(bytes).get
    case Some(c) if c == classOf[OpeningOrdersReceived.Immutable] => _cOpeningOrdersReceived.invert(bytes).get
    case Some(c) if c == classOf[OrderLogisticsUpdated.Immutable] => _cOrderLogisticsUpdated.invert(bytes).get
    case Some(c) if c == classOf[OrderLogisticsUpdatedResult.Immutable] => _cOrderLogisticsUpdatedResult.invert(bytes).get
    case Some(c) if c == classOf[PaymentMessage.Immutable] => _cPaymentMessage.invert(bytes).get
    case Some(c) if c == classOf[PaymentReceived.Immutable] => _cPaymentReceived.invert(bytes).get
    case Some(c) if c == classOf[PingFeProxy.Immutable] => _cPingFeProxy.invert(bytes).get
    case Some(c) if c == classOf[PlatformBalanceUpdated.Immutable] => _cPlatformBalanceUpdated.invert(bytes).get
    case Some(c) if c == classOf[QuantMessage.Immutable] => _cQuantMessage.invert(bytes).get
    case Some(c) if c == classOf[QueryAccount.Immutable] => _cQueryAccount.invert(bytes).get
    case Some(c) if c == classOf[QueryAccountResult.Immutable] => _cQueryAccountResult.invert(bytes).get
    case Some(c) if c == classOf[QueryAccountsById.Immutable] => _cQueryAccountsById.invert(bytes).get
    case Some(c) if c == classOf[QueryAccountsByIdResult.Immutable] => _cQueryAccountsByIdResult.invert(bytes).get
    case Some(c) if c == classOf[QueryAggregateAssets.Immutable] => _cQueryAggregateAssets.invert(bytes).get
    case Some(c) if c == classOf[QueryAggregateAssetsResult.Immutable] => _cQueryAggregateAssetsResult.invert(bytes).get
    case Some(c) if c == classOf[QueryAllChangeRate.Immutable] => _cQueryAllChangeRate.invert(bytes).get
    case Some(c) if c == classOf[QueryAllChangeRateResult.Immutable] => _cQueryAllChangeRateResult.invert(bytes).get
    case Some(c) if c == classOf[QueryAsset.Immutable] => _cQueryAsset.invert(bytes).get
    case Some(c) if c == classOf[QueryAssetResult.Immutable] => _cQueryAssetResult.invert(bytes).get
    case Some(c) if c == classOf[QueryBill.Immutable] => _cQueryBill.invert(bytes).get
    case Some(c) if c == classOf[QueryBillResult.Immutable] => _cQueryBillResult.invert(bytes).get
    case Some(c) if c == classOf[QueryBlockChainAmount.Immutable] => _cQueryBlockChainAmount.invert(bytes).get
    case Some(c) if c == classOf[QueryBlockChainAmountResult.Immutable] => _cQueryBlockChainAmountResult.invert(bytes).get
    case Some(c) if c == classOf[QueryChangeRate.Immutable] => _cQueryChangeRate.invert(bytes).get
    case Some(c) if c == classOf[QueryChangeRateResult.Immutable] => _cQueryChangeRateResult.invert(bytes).get
    case Some(c) if c == classOf[QueryInvoice.Immutable] => _cQueryInvoice.invert(bytes).get
    case Some(c) if c == classOf[QueryInvoiceById.Immutable] => _cQueryInvoiceById.invert(bytes).get
    case Some(c) if c == classOf[QueryInvoiceByIds.Immutable] => _cQueryInvoiceByIds.invert(bytes).get
    case Some(c) if c == classOf[QueryInvoiceResult.Immutable] => _cQueryInvoiceResult.invert(bytes).get
    case Some(c) if c == classOf[QueryMerchantBalance.Immutable] => _cQueryMerchantBalance.invert(bytes).get
    case Some(c) if c == classOf[QueryMerchantBalanceResult.Immutable] => _cQueryMerchantBalanceResult.invert(bytes).get
    case Some(c) if c == classOf[QueryMerchantById.Immutable] => _cQueryMerchantById.invert(bytes).get
    case Some(c) if c == classOf[QueryMerchantResult.Immutable] => _cQueryMerchantResult.invert(bytes).get
    case Some(c) if c == classOf[QueryMerchants.Immutable] => _cQueryMerchants.invert(bytes).get
    case Some(c) if c == classOf[QueryMerchantsResult.Immutable] => _cQueryMerchantsResult.invert(bytes).get
    case Some(c) if c == classOf[QueryOrderStatus.Immutable] => _cQueryOrderStatus.invert(bytes).get
    case Some(c) if c == classOf[QueryOrderStatusResult.Immutable] => _cQueryOrderStatusResult.invert(bytes).get
    case Some(c) if c == classOf[QueryRecoverStats.Immutable] => _cQueryRecoverStats.invert(bytes).get
    case Some(c) if c == classOf[QuerySnapshots.Immutable] => _cQuerySnapshots.invert(bytes).get
    case Some(c) if c == classOf[QuerySnapshotsResult.Immutable] => _cQuerySnapshotsResult.invert(bytes).get
    case Some(c) if c == classOf[QueryTransfer.Immutable] => _cQueryTransfer.invert(bytes).get
    case Some(c) if c == classOf[QueryTransferResult.Immutable] => _cQueryTransferResult.invert(bytes).get
    case Some(c) if c == classOf[RegisterFailed.Immutable] => _cRegisterFailed.invert(bytes).get
    case Some(c) if c == classOf[RegisterSucceeded.Immutable] => _cRegisterSucceeded.invert(bytes).get
    case Some(c) if c == classOf[RequestPasswordResetFailed.Immutable] => _cRequestPasswordResetFailed.invert(bytes).get
    case Some(c) if c == classOf[RequestPasswordResetSucceeded.Immutable] => _cRequestPasswordResetSucceeded.invert(bytes).get
    case Some(c) if c == classOf[RequestTransferFailed.Immutable] => _cRequestTransferFailed.invert(bytes).get
    case Some(c) if c == classOf[RequestTransferSucceeded.Immutable] => _cRequestTransferSucceeded.invert(bytes).get
    case Some(c) if c == classOf[ResendFailed.Immutable] => _cResendFailed.invert(bytes).get
    case Some(c) if c == classOf[ResendNotify.Immutable] => _cResendNotify.invert(bytes).get
    case Some(c) if c == classOf[ResendSuccessed.Immutable] => _cResendSuccessed.invert(bytes).get
    case Some(c) if c == classOf[ResetPasswordFailed.Immutable] => _cResetPasswordFailed.invert(bytes).get
    case Some(c) if c == classOf[ResetPasswordSucceeded.Immutable] => _cResetPasswordSucceeded.invert(bytes).get
    case Some(c) if c == classOf[SecretKeyUpdated.Immutable] => _cSecretKeyUpdated.invert(bytes).get
    case Some(c) if c == classOf[SellBTC.Immutable] => _cSellBTC.invert(bytes).get
    case Some(c) if c == classOf[SellBitcoin.Immutable] => _cSellBitcoin.invert(bytes).get
    case Some(c) if c == classOf[SellBitcoinAtL2Market.Immutable] => _cSellBitcoinAtL2Market.invert(bytes).get
    case Some(c) if c == classOf[SendRawTransaction.Immutable] => _cSendRawTransaction.invert(bytes).get
    case Some(c) if c == classOf[SendRawTransactionResult.Immutable] => _cSendRawTransactionResult.invert(bytes).get
    case Some(c) if c == classOf[SendVerificationMail.Immutable] => _cSendVerificationMail.invert(bytes).get
    case Some(c) if c == classOf[SendVerificationMailSucceeded.Immutable] => _cSendVerificationMailSucceeded.invert(bytes).get
    case Some(c) if c == classOf[SetMerchantStatusResult.Immutable] => _cSetMerchantStatusResult.invert(bytes).get
    case Some(c) if c == classOf[SubmitExchangeOrder.Immutable] => _cSubmitExchangeOrder.invert(bytes).get
    case Some(c) if c == classOf[SubmitExchangeOrderResult.Immutable] => _cSubmitExchangeOrderResult.invert(bytes).get
    case Some(c) if c == classOf[SubmitTradeAction.Immutable] => _cSubmitTradeAction.invert(bytes).get
    case Some(c) if c == classOf[SubmitTradeActionResult.Immutable] => _cSubmitTradeActionResult.invert(bytes).get
    case Some(c) if c == classOf[SubmittedOrders.Immutable] => _cSubmittedOrders.invert(bytes).get
    case Some(c) if c == classOf[SyncDepth.Immutable] => _cSyncDepth.invert(bytes).get
    case Some(c) if c == classOf[SyncHotAddresses.Immutable] => _cSyncHotAddresses.invert(bytes).get
    case Some(c) if c == classOf[SyncHotAddressesResult.Immutable] => _cSyncHotAddressesResult.invert(bytes).get
    case Some(c) if c == classOf[SyncPrivateKeys.Immutable] => _cSyncPrivateKeys.invert(bytes).get
    case Some(c) if c == classOf[SyncPrivateKeysResult.Immutable] => _cSyncPrivateKeysResult.invert(bytes).get
    case Some(c) if c == classOf[TakeSnapshotNow.Immutable] => _cTakeSnapshotNow.invert(bytes).get
    case Some(c) if c == classOf[TransferCryptoCurrency.Immutable] => _cTransferCryptoCurrency.invert(bytes).get
    case Some(c) if c == classOf[TryFetchAddresses.Immutable] => _cTryFetchAddresses.invert(bytes).get
    case Some(c) if c == classOf[TrySyncHotAddresses.Immutable] => _cTrySyncHotAddresses.invert(bytes).get
    case Some(c) if c == classOf[UnlockCoinRequest.Immutable] => _cUnlockCoinRequest.invert(bytes).get
    case Some(c) if c == classOf[UpdateAccount.Immutable] => _cUpdateAccount.invert(bytes).get
    case Some(c) if c == classOf[UpdateAccountResult.Immutable] => _cUpdateAccountResult.invert(bytes).get
    case Some(c) if c == classOf[UpdateMerchantFailed.Immutable] => _cUpdateMerchantFailed.invert(bytes).get
    case Some(c) if c == classOf[UpdateMerchantSucceeded.Immutable] => _cUpdateMerchantSucceeded.invert(bytes).get
    case Some(c) if c == classOf[UpdateSecretKey.Immutable] => _cUpdateSecretKey.invert(bytes).get
    case Some(c) if c == classOf[ValidateRegisterFailed.Immutable] => _cValidateRegisterFailed.invert(bytes).get
    case Some(c) if c == classOf[ValidateRegisterSucceeded.Immutable] => _cValidateRegisterSucceeded.invert(bytes).get
    case Some(c) if c == classOf[ValidateToken.Immutable] => _cValidateToken.invert(bytes).get
    case Some(c) if c == classOf[WatchInvoiceStatus.Immutable] => _cWatchInvoiceStatus.invert(bytes).get
    case Some(c) if c == classOf[TAccountState.Immutable] => _cTAccountState.invert(bytes).get
    case Some(c) if c == classOf[TBillWriterState.Immutable] => _cTBillWriterState.invert(bytes).get
    case Some(c) if c == classOf[TBlockchainState.Immutable] => _cTBlockchainState.invert(bytes).get
    case Some(c) if c == classOf[TInvoiceState.Immutable] => _cTInvoiceState.invert(bytes).get
    case Some(c) if c == classOf[TNotificationState.Immutable] => _cTNotificationState.invert(bytes).get
    case Some(c) if c == classOf[TSimpleState.Immutable] => _cTSimpleState.invert(bytes).get
    case Some(c) if c == classOf[TTradingState.Immutable] => _cTTradingState.invert(bytes).get

    case Some(c) => throw new IllegalArgumentException("Cannot deserialize class: " + c.getCanonicalName)
    case None => throw new IllegalArgumentException("No class found in EventSerializer when deserializing array: " + bytes.mkString("").take(100))
  }
}
